---
title: "Example 1 Differentiating normal cells from EMT transitioning cells"
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, mvtnorm, stringr, MASS, spatstat, GoFKernel, goftest, igraph, 
               tidyr, flowCore, gridExtra) 

dir_home <- "/Users/zq/Library/CloudStorage/GoogleDrive-qianzhao@umass.edu/My Drive/Research/Histogram/BetaTree/JASA/"
dir_work <- "/Users/qianzhao/Google Drive/My Drive/Research/Histogram/BetaTree/JASA/"

source_code_dir <- paste0(dir_work, "V2/src/")  
src_file_names <- list.files(source_code_dir, full.names = T)
for(f_path in src_file_names){source(f_path)}

package_code_dir <- paste0(dir_work, "V1/BetaTrees-JASA-v1/R")  
package_file_names <- list.files(package_code_dir, full.names = T)
for(f_path in package_file_names){source(f_path)}

fig_dir <- paste0(dir_work, "V2/Fig/")

data_dir_home <- paste0(dir_home, "V2/Mass Cytometry FSC Live cells gate_Fig4a-g/") 
data_dir_work <- paste0(dir_work, "V2/Mass Cytometry FSC Live cells gate_Fig4a-g/") 
```

Epithelial-mesenchymal transition (EMT) equips breast cancer cells for metastasis and treatment resistance. Detecting of EMT-undergoing cells is challenging because of heterogeneity of cancer cells and phenotypic diversity of EMT-undergoing cells. In the article [Mass cytometric and transcriptomic profiling of epithelial-mesenchymal transitions in human mammary cell lines](https://www.nature.com/articles/s41597-022-01137-4), researchers treated cells from HMLE cell line with TGF\$\beta\$1 to induce EMT. They measured surface protein markers in both treated and control cells to identify protein markers indicative of EMT. The measurements were conducted from day 2 to day 12 every 2 days using mass flow cytometry; the data is available at [Mendeley data](https://data.mendeley.com/datasets/pt3gmyk5r2/2). In this example, we explore how protein expression of treated and control cells differ and how they both evolve over the course of the experiment period.

## Data Pre-processing

### Load data

Researchers collected data from three replicates in each measurement; UMAP visualization showed that cells from the triplicates look similar to each other. We use data from HMLE cell line because UMAP visualization shows overlap between the EMT transitioning and normal cell groups. We apply a logicle transformation with parameters chosen based on range of data values.

```{r var_names_all}
adhesion_molecules <- c("ECadherin","CD44", "CD90", "EpCAM", 
                              "CD146", "CD166", "CD111", "CD155", "CD24", "CD44",
                              "CD49f", "CD51", "Galectin3", "NCadherin") 
cytoskeletal_proteins <- c("K7", "K8K18", "K5", "K14", "Vimentin") 
diverse_function <- c("CD15", "CD10", "CD138", "Fibronectin", "Podoplanin", "CA9") 
signaling_molecules <- c("EGFR", "Notch3", "CD136", "CD81") # CCR7 is not in the data
proliferation <- c("Ki67","CyclinB1", "clCASP3clPARP1", "IdU") # IdU is not in the data

var_names_all <- c(adhesion_molecules, cytoskeletal_proteins, diverse_function,
                   signaling_molecules, proliferation)

```

```{r logicle}
# define logicle transformation
lgcl <- logicleTransform( w = 0.5, t= 10000, m = 5)
trans <- transformList(var_names_all, lgcl)
```

### Control cells

```{r}
control_data <- tibble()
for(day in seq(2, 12, by = 2)){
  for(trip in 1:3){
    file_control_name <- paste0("HMLE_d", str_pad(day, 2, pad = "0", side = "left"), "_ctrl_TC2_trip", trip, "_LiveCell.fcs")
    
    x <- read.FCS(paste0(data_dir_work, file_control_name), transformation=FALSE)
    after <- transform(x, trans) # logicle transformation
    df_new <- as_tibble(after@exprs) %>% 
      dplyr::select(all_of(var_names_all)) %>% 
      add_column(day = day)
  
    control_data <- bind_rows(control_data, df_new)
  }
}
```

### Treated cells

```{r}
treated_data <- tibble()
for(day in seq(2, 12, by = 2)){
  for(trip in 1:3){
    
    file_treated_name <- paste0("HMLE_d", str_pad(day, 2, pad = "0", side = "left"), "_TGFb_TC2_trip", trip, "_LiveCell.fcs")
    
    x <- read.FCS(paste0(data_dir_work, file_treated_name), transformation=FALSE)
    after <- transform(x, trans) # logicle transformation
    df_new <- as_tibble(after@exprs) %>% 
      dplyr::select(all_of(var_names_all)) %>% 
      add_column(day = day)
  
    treated_data <- bind_rows(treated_data, df_new)
  }
}
```

### Sample size

The total sample size of treated and control groups are given below.

```{r}
cat("Control cells:")
table(control_data$day)
cat("Treated cells:")
table(treated_data$day)
```

### E/M cell sample size

Researchers mentioned in the article that EMT corresponds to increasing number of cells of mesenchymal (M) phenotype, which is characterized by losses of E-Cadherin and gains in expression of Vimentin. Not all treated cells become M phenotype at the end of 12 days, some became EM phenotype (Vimentin+E-Cadherin+) and some in E1 (Vimentin-ECadherin+) or E2 (Vimentin-ECadhirin-) phenotypes. Researchers used a manual gating based on Vimentin and ECadherin levels to separate cells into these phenotypes. We repeat the same manual gating, with parameters derived from Fig. 1 in the paper and report the number of cells in each phenotye. We work with the full data in subsequent analysis and set the value `ECadherin > 2.170` and `Vimentin > 2.484` in the full data to obtain cells of E/M phenotype.

```{r gate_param}
# Gate for EM phenotype 
gate_em <- rectangleGate(filterId = "EMTM", 
                        list("ECadherin" = c(10^1.2, 10^3.5), "Vimentin" = c(10^1.5, 10^5)))
```

```{r control_em}
control_data_em <- tibble()
for(day in seq(2, 12, by = 2)){
  for(trip in 1:3){
    file_control_name <- paste0("HMLE_d", str_pad(day, 2, pad = "0", side = "left"), "_ctrl_TC2_trip", trip, "_LiveCell.fcs")
    
    x <- read.FCS(paste0(data_dir_work, file_control_name), transformation=FALSE)
    x <- Subset(x, gate_em) # gating 
    after <- transform(x, trans) # logicle transformation
    df_new <- as_tibble(after@exprs) %>% 
      dplyr::select(all_of(var_names_all)) %>% 
      add_column(day = day)
  
    control_data_em <- bind_rows(control_data_em, df_new)
  }
}
```

```{r treated_em}
treated_data_em <- tibble()
for(day in seq(2, 12, by = 2)){
  for(trip in 1:3){
    
    file_treated_name <- paste0("HMLE_d", str_pad(day, 2, pad = "0", side = "left"), "_TGFb_TC2_trip", trip, "_LiveCell.fcs")
    
    x <- read.FCS(paste0(data_dir_work, file_treated_name), transformation=FALSE)
    x <- Subset(x, gate_em) # gating 
    after <- transform(x, trans) # logicle transformation
    df_new <- as_tibble(after@exprs) %>% 
      dplyr::select(all_of(var_names_all)) %>% 
      add_column(day = day)
  
    treated_data_em <- bind_rows(treated_data_em, df_new)
  }
}
```

Number of cells in E/M phenotype each day:

```{r em_sample_size}
cat("Control cells in E/M phenotype:")
table(control_data_em$day)
cat("Treated cells in E/M phenotype:")
table(treated_data_em$day)
```

### Add Gaussian noise to break ties

We add a small Gaussian noise with mean 0 and std.dev 0.01 to break ties.

```{r n_sample}
n_control <- nrow(control_data)
d_control <- ncol(control_data)
n_treated <- nrow(treated_data)
d_treated <- ncol(treated_data)
```

```{r add_noise}
set.seed(1) # set seed for reproduce ersult
control_data_w_noise <- control_data + matrix(rnorm(n_control * d_control, 0, 0.01), n_control, d_control)
control_data_w_noise$day <- control_data$day
treated_data_w_noise <- treated_data + matrix(rnorm(n_treated * d_treated, 0, 0.01), n_treated, d_treated)
treated_data_w_noise$day <- treated_data$day
```

### Group data into three periods

Next, we group consecutive days into periods.

```{r group_days}
# create a new column called period based on days 
control_data_w_noise <- control_data_w_noise %>% 
  mutate(period = case_when(
    day %in% c(2, 4) ~ 1,
    day %in% c(6, 8) ~ 2,
    day %in% c(10, 12) ~ 3
  ))

treated_data_w_noise <- treated_data_w_noise %>% 
  mutate(period = case_when(
    day %in% c(2, 4) ~ 1,
    day %in% c(6, 8) ~ 2,
    day %in% c(10, 12) ~ 3
  ))
```

## Construct a 5-dimensional histogram

We construct bounded Beta-trees (exclude one observation at boundaries of each dimension) at 80% confidence level for five protein biomarkers that span several functions:

```{r var_names}
var_names <- c("ECadherin", "Vimentin","Podoplanin", "CD44", "CD136")
```

```{r build_hist, message = F, results = "hide"}
alpha <- 0.2 
d <- length(var_names)
result <- list()

for(i in 1:3){
  cat("Period: ", i, "\n")
  
  # control cells  
  hist_data_control <- control_data_w_noise %>% 
    dplyr::filter(period == i) %>% 
    dplyr::select(all_of(var_names))
  
  # bounded histogram
  hist_control <- BuildHist(as.matrix(hist_data_control), alpha = alpha, 
                            method = "weighted_bonferroni", plot = FALSE,
                            bounded = TRUE, option = "ndat", qt = rep(1, d)) 
  
  mode_control <- FindModesApproximate(hist = hist_control, d = d, L = 50, B = 10000)
  
  # treated cells 
  hist_data_treated <- treated_data_w_noise %>% 
    dplyr::filter(period == i) %>% 
    dplyr::select(all_of(var_names))
  
  # bounded histogram
  hist_treated <- BuildHist(as.matrix(hist_data_treated), alpha = alpha, 
                          method = "weighted_bonferroni", plot = FALSE,
                          bounded = TRUE, option = "ndat", qt = rep(1, d))
  
  mode_treated <- FindModesApproximate(hist = hist_treated, d = d, L = 50, B = 10000)
  
  result[[i]] <- list(
      hist_data_control = hist_data_control,
      hist_control = hist_control,
      mode_control = mode_control,
      hist_data_treated = hist_data_treated, 
      hist_treated = hist_treated, 
      mode_treated = mode_treated
  )
}

```

### Location of modes

We show the locations of modes identified in treated/control cells during each period below:

```{r mode_location}
for(i in 1:3){
  cat("Period:", i, "\n")
  cat("Control cell, lower end: \n")
  hist_control <- result[[i]][["hist_control"]]
  mode_control <- result[[i]][["mode_control"]]$mode
  cat(round(hist_control[mode_control,1:d], 2), "\n")
  cat("Ccontrol cell, upper end: \n")
  cat(round(hist_control[mode_control,(d+1):(2*d)], 2), "\n")
  
  cat("Treated cell, lower end : \n")
  hist_treated <- result[[i]][["hist_treated"]]
  mode_treated <- result[[i]][["mode_treated"]]$mode
  cat(round(hist_treated[mode_treated,1:d], 3), "\n")
  cat("Treated cell, upper end: \n")
  cat(round(hist_treated[mode_treated,(d+1):(2*d)], 3), "\n")
}
```

From the locations of the cluster centers, we can see that the treated cells has lower levels of E-Cadherin and CD44, and higher levels of Vimentin and Podoplanin.

### Visualize marginal distributions

We plot the marginal distribution of `Podoplanin` and `CD44` for control and treated cells over the three periods.

```{r get_plot_data_marginal, message = F, result = F}
d <- length(var_names)

plot_marginal_data <- list()

for(i in 1:3){
  cat("Period: ", i, "\n")
  
  # control cells
  hist_data_control <- result[[i]][["hist_data_control"]]
  hist_control <- result[[i]][["hist_control"]]
  
  plot_data_control_marginal <- plot_histogram_data(hist_data_control, 
                                             hist_control, d, 
                                lower_constraint = rep(0.5, d), 
                                upper_constraint = rep(5, d), 
                                plot_coord = c(3, 4), 
                                nint = 50, 
                                plot_true_density = FALSE)
   
  kernel_control <- kde2d(x = hist_data_control[,3], 
                          y = hist_data_control[,4], 
                          n = 50
                          )
  
  # treated samples 
  hist_data_treated <- result[[i]][["hist_data_treated"]]
  hist_treated <- result[[i]][["hist_treated"]]

  plot_data_treated_marginal <- plot_histogram_data(hist_data_treated, hist_treated, d, 
                                lower_constraint = rep(0.5, d), 
                                upper_constraint = rep(5, d), 
                                plot_coord = c(3, 4), 
                                nint = 50, 
                                plot_true_density = FALSE)
  
  # marginal distribution using kernel density estimate 
  kernel_treated <- kde2d(x = hist_data_treated[,3], 
                              y = hist_data_treated[,4], 
                              n = 50)
  
  plot_marginal_data[[i]] <- list(
    plot_data_control_marginal = plot_data_control_marginal, 
    kernel_control = kernel_control,
    plot_data_treated_marginal = plot_data_treated_marginal,
    kernel_treated = kernel_treated
  )
}
```

```{r marginal_viz, message = F}
for(i in 1:3){
  for(type in c("treated", "control")){
    
    plot_data <- plot_marginal_data[[i]][[paste0("plot_data_", type, "_marginal")]]
    kernel_est <- plot_marginal_data[[i]][[paste0("kernel_", type)]]


    grid <- expand.grid( kernel_est$x, kernel_est$y)
    grid_val <- tibble(
      x = grid[,1],
      y = grid[,2],
      z = as.vector(kernel_est$z)
    )  %>% 
      dplyr::filter(x > 0.5, y > 0.5)

    if(type == "treated"){
      title <- paste0("Period ", i, "  Treated" )
    }else{
      title <- paste0("Period ", i, "  Control" )
    }

    filename <- paste0(fig_dir, "Podoplanin_CD44_marginal_",i, "_", type, ".png")

    grid_lower_x <-  plot_data$grid_lower[,plot_data$plot_coord[1]]
    grid_upper_x <- plot_data$grid_upper[,plot_data$plot_coord[1]]
    grid_lower_y <-  plot_data$grid_lower[,plot_data$plot_coord[2]]
    grid_upper_y <- plot_data$grid_upper[,plot_data$plot_coord[2]]
    
    grid_volume <- (grid_upper_y - grid_lower_y) * (grid_upper_x - grid_lower_x)
    grid_density <- plot_data$est_prob[,1] / sum(plot_data$est_prob[,1]) / grid_volume
  
    g <- ggplot() + 
      geom_rect(aes(xmin = grid_lower_x , 
                    xmax = grid_upper_x,
                    ymin  = grid_lower_y,
                    ymax = grid_upper_y, 
                    fill =  grid_density ) ) + 
      scale_fill_gradient2(low = "white", high = "#08306b",mid = "#6baed6",
                           midpoint = quantile(grid_density, 0.99), 
                           aesthetics = "fill",
                           name = "density") + 
      geom_contour(aes(x = x, y = y, 
                       z = z), 
                   breaks = quantile(grid_val$z, c(0.75, 0.85, 0.95)),
                   color = "grey30", data = grid_val) + 
     scale_x_continuous(expand = expansion(0),
                     limits = c(1.5, 4)) + # see https://ggplot2-book.org/scales-position 
  scale_y_continuous(expand = expansion(0), 
                     limits = c(0.8, 3)) +
      theme_classic() +  
  theme(panel.background = element_blank(),
            panel.border=element_blank(),
        plot.title = element_text(hjust = 0.5),
        text = element_text(size = 18)
        ) + 
  labs(title = title, 
       x = "Podoplanin", 
       y = "CD44") 
  

ggsave(g, filename = filename, 
         width = 5, height = 4, units = "in")
  }
}
```

### Visualize distributions of E/M cells

Next, we visualize the joint distribution of `Podoplanin` and `CD44` for cells exhibiting E/M-phenotype, which we define as cells with `ECadherin > 2.170` and `Vimentin > 2.484` .

```{r get_data_em,  message = F, results = "hide"}
d <- length(var_names)
plot_conditional_data <- list()

for(i in 1:3){
  cat("Period: ", i, "\n")
  
  # control cells
  hist_data_control <- result[[i]][["hist_data_control"]]
  hist_control <- result[[i]][["hist_control"]]
  
  plot_data_control_conditional <- plot_histogram_data(hist_data_control,
                                                       hist_control, d, 
                                lower_constraint = c(2.170, 2.484, 0.5, 0.5, 0.5), 
                                upper_constraint = c(5, 5, 5, 5, 5), 
                                plot_coord = c(3, 4), 
                                nint = 50, 
                                plot_true_density = FALSE)
  
  hist_data_control_conditional <- dplyr::filter(hist_data_control,
                                                 ECadherin > 2.170, Vimentin > 2.484)
    
  # marginal distribution using kernel density estimate 
  kernel_control_conditional <- kde2d(x = hist_data_control_conditional[,3],
                                      y = hist_data_control_conditional[,4],
                                      n = 50)
  
  # treated cells 
  hist_data_treated<- result[[i]][["hist_data_treated"]]
  hist_treated <- result[[i]][["hist_treated"]]
  
  plot_data_treated_conditional <- plot_histogram_data(hist_data_treated,
                                                       hist_treated, d, 
                                lower_constraint = c(2.170, 2.484, 0.5, 0.5, 0.5), 
                                upper_constraint = c(5, 5, 5, 5, 5), 
                                plot_coord = c(3, 4), 
                                nint = 50, 
                                plot_true_density = FALSE)
  
  hist_data_treated_conditional <- dplyr::filter(hist_data_treated,
                                                 ECadherin > 2.170, Vimentin > 2.484)
    
  # marginal distribution using kernel density estimate 
  kernel_treated_conditional <- kde2d(x = hist_data_treated_conditional[,3],
                                      y = hist_data_treated_conditional[,4],
                                      n = 50)
  
  plot_conditional_data[[i]] <- list(
    plot_data_control_conditional = plot_data_control_conditional,
    kernel_control_conditional = kernel_control_conditional,
    plot_data_treated_conditional = plot_data_treated_conditional,
    kernel_treated_conditional = kernel_treated_conditional
  )
}

# save.image(file = paste0(dir_work, "V2/EMT_5d.RData"))
```

```{r plot_conditional_density, message = F}
for(i in 1:3){
  for(type in c("treated", "control")){
    
    plot_data <- plot_conditional_data[[i]][[paste0("plot_data_", type, "_conditional")]]
    kernel_est <- plot_conditional_data[[i]][[paste0("kernel_", type, "_conditional")]]


    grid <- expand.grid( kernel_est$x, kernel_est$y)
    grid_val <- tibble(
      x = grid[,1],
      y = grid[,2],
      z = as.vector(kernel_est$z)
    )  %>% 
      dplyr::filter(x > 0.5, y > 0.5)

    if(type == "treated"){
      title <- paste0("Period ", i, " Treated" )
    }else{
      title <- paste0("Period ", i, " Control" )
    }

    filename <- paste0(fig_dir, "Podoplanin_CD44_conditional_",i, "_", type, ".png")
    
    grid_lower_x <-  plot_data$grid_lower[,plot_data$plot_coord[1]]
    grid_upper_x <- plot_data$grid_upper[,plot_data$plot_coord[1]]
    grid_lower_y <-  plot_data$grid_lower[,plot_data$plot_coord[2]]
    grid_upper_y <- plot_data$grid_upper[,plot_data$plot_coord[2]]
    
    grid_volume <- (grid_upper_y - grid_lower_y) * (grid_upper_x - grid_lower_x)
    grid_density <- plot_data$est_prob[,1] / sum(plot_data$est_prob[,1]) / grid_volume
  
    g <- ggplot() + 
      geom_rect(aes(xmin = grid_lower_x , 
                    xmax = grid_upper_x,
                    ymin  = grid_lower_y,
                    ymax = grid_upper_y, 
                    fill =  grid_density ) ) + 
      scale_fill_gradient2(low = "white", high = "#08306b",mid = "#6baed6",
                           midpoint = quantile(grid_density, 0.99), 
                           aesthetics = "fill",
                           name = "density") + 
      geom_contour(aes(x = x, y = y, 
                       z = z), 
                   breaks = quantile(grid_val$z, c(0.75, 0.85, 0.95)),
                   color = "grey30", data = grid_val) + 
    scale_x_continuous(expand = expansion(0),
                     limits = c(1.8, 4.2)
                     ) + # see https://ggplot2-book.org/scales-position 
  scale_y_continuous(expand = expansion(0),
                     limits = c(0.8, 3.5)
                     ) +
      theme_classic() +  
  theme(panel.background = element_blank(),
            panel.border=element_blank(),
        plot.title = element_text(hjust = 0.5),
        text = element_text(size = 18)
        ) + 
  labs(title = title, 
       x = "Podoplanin", 
       y = "CD44") 
  

ggsave(g, filename = filename, 
         width = 5, height = 4, units = "in")
  }
}
```
